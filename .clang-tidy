# 文档：https://clang.llvm.org/extra/clang-tidy/checks/list.html

ExtraArgs: [-std=c++2a]
Checks: "-*,
  readability-*,
  -readability-identifier-length,
  -readability-magic-numbers,
  bugprone-*,
  cppcoreguidelines-*,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-virtual-class-destructor,
  modernize-*,
  -modernize-avoid-c-arrays,
  -modernize-use-trailing-return-type,
  misc-*,
  -misc-const-correctness,
  performance-*"

CheckOptions:
  # 结构体使用大驼峰，并且加上S前缀
  # struct pre_foo {};
  # struct SFoo {};
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.StructPrefix
    value: S

  # enum pre_foo_post { One, Two, Three };
  # enum EFoo { EOne, ETwo, EThree };
  - key: readability-identifier-naming.EnumCase
    value: CamelCase
  - key: readability-identifier-naming.EnumPrefix
    value: E
  - key: readability-identifier-naming.EnumConstantCase
    value: CamelCase
  - key: readability-identifier-naming.EnumConstantPrefix
    value: E

  # 抽象接口类使用大驼峰，并且加上I前缀
  - key: readability-identifier-naming.AbstractClassCase
    value: CamelCase
  - key: readability-identifier-naming.AbstractClassPrefix
    value: I

  # 类名使用大驼峰，并且加上C前缀
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.ClassPrefix
    value: C

  # class FOO { public: static const int pre_class_constant; };
  # class FOO { public: static const int m_ciClassConstant; };
  - key: readability-identifier-naming.ClassConstantCase
    value: CamelCase
  - key: readability-identifier-naming.ClassConstantPrefix
    value: m_c
  - key: readability-identifier-naming.ClassConstantHungarianPrefix
    value: On

  # class Foo { const char pre_constmember; };
  # class Foo { const char m_ccConstMember; };
  - key: readability-identifier-naming.ConstantMemberCase
    value: CamelCase
  - key: readability-identifier-naming.ConstantMemberPrefix
    value: m_c
  - key: readability-identifier-naming.ConstantMemberHungarianPrefix
    value: On

  # class FOO { public: static int pre_class_constant; };
  # class FOO { public: static int m_iClassConstant; };
  - key: readability-identifier-naming.ClassMemberCase
    value: CamelCase
  - key: readability-identifier-naming.ClassMemberPrefix
    value: m_
  - key: readability-identifier-naming.ClassMemberHungarianPrefix
    value: On

  # class FOO { private: int pre_class_constant; };
  # class FOO { private: int m_iClassConstant; };
  - key: readability-identifier-naming.PrivateMemberCase
    value: CamelCase
  - key: readability-identifier-naming.PrivateMemberPrefix
    value: m_
  - key: readability-identifier-naming.PrivateMemberHungarianPrefix
    value: On

  # class FOO { protected: int pre_class_constant; };
  # class FOO { protected: int m_iClassConstant; };
  - key: readability-identifier-naming.ProtectedMemberCase
    value: CamelCase
  - key: readability-identifier-naming.ProtectedMemberPrefix
    value: m_
  - key: readability-identifier-naming.ProtectedMemberHungarianPrefix
    value: On

  # class FOO { public: int pre_class_constant; };
  # class FOO { public: int m_iClassConstant; };
  # - key:             readability-identifier-naming.PublicMemberCase
  #   value:           CamelCase
  # - key:             readability-identifier-naming.PublicMemberPrefix
  #   value:           m_
  # - key:             readability-identifier-naming.PublicMemberHungarianPrefix
  #   value:           On

  # unsigned const pre_myconstglobal_array[] = {1, 2, 3};
  # unsigned const g_caMyConstGlobalArray[] = {1, 2, 3};
  - key: readability-identifier-naming.GlobalConstantCase
    value: CamelCase
  - key: readability-identifier-naming.GlobalConstantPrefix
    value: g_c
  - key: readability-identifier-naming.GlobalConstantHungarianPrefix
    value: On

  # # 函数使用小驼峰命名
  - key: readability-identifier-naming.GlobalFunctionCase
    value: camelBack
  - key: readability-identifier-naming.FunctionCase
    value: camelBack
  - key: readability-identifier-naming.MethodCase
    value: camelBack

  - key: readability-identifier-naming.VariableCase
    value: CamelCase
  # - key:             readability-identifier-naming.VariablePrefix
  #   value:
  - key: readability-identifier-naming.VariableHungarianPrefix
    value: On

  # int pre_global3_post;
  # int g_iGloabl13;
  - key: readability-identifier-naming.GlobalVariableCase
    value: CamelCase
  - key: readability-identifier-naming.GlobalVariablePrefix
    value: g_
  - key: readability-identifier-naming.GlobalVariableHungarianPrefix
    value: On

  # void foo() { int local = 3; }
  # void foo() { int iLocal = 3; }
  - key: readability-identifier-naming.LocalVariableCase
    value: CamelCase
  - key: readability-identifier-naming.LocalVariableIgnoredRegexp
    value: ".*str.*|[a-z]"
  - key: readability-identifier-naming.LocalVariableHungarianPrefix
    value: On

  # void foo() { int *pre_local_constant; }
  # void foo() { int *piLocalConstant; }
  - key: readability-identifier-naming.LocalPointerCase
    value: CamelCase
  - key: readability-identifier-naming.LocalPointerHungarianPrefix
    value: On

  # #define my_macro_definition
  # #define MY_MACRO_DEFINITION
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE

  # void func(int pre_param);
  # void func(int iParam);
  - key: readability-identifier-naming.ParameterCase
    value: CamelCase
  - key: readability-identifier-naming.ParameterIgnoredRegexp
    value: ".*str.*"
  - key: readability-identifier-naming.ParameterHungarianPrefix
    value: On

  # static unsigned const pre_mystatic_array[] = {1, 2, 3};
  # static unsigned const saMystaticArray[] = {1, 2, 3};
  - key: readability-identifier-naming.StaticVariableCase
    value: CamelCase
  - key: readability-identifier-naming.StaticVariablePrefix
    value: s
  - key: readability-identifier-naming.StaticVariableHungarianPrefix
    value: On

  # static unsigned const pre_mystatic_array[] = {1, 2, 3};
  # static unsigned const caMystaticArray[] = {1, 2, 3};
  - key: readability-identifier-naming.StaticConstantCase
    value: CamelCase
  - key: readability-identifier-naming.StaticConstantPrefix
    value: c
  - key: readability-identifier-naming.StaticConstantHungarianPrefix
    value: On

  # 模板参数名称使用大驼峰
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase

  # 使用typedef和using重命名类型时，使用大驼峰
  - key: readability-identifier-naming.TypedefCase
    value: CamelCase
  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase

  # 重定义匈牙利前缀
  # - key:             readability-identifier-naming.HungarianNotation.PrimitiveType.int
  #   value:           n
  # - key:             readability-identifier-naming.HungarianNotation.UserDefinedType.DWORD32
  #   value:           dw

  # 超过 100 行的函数警告
  - key: readability-function-size.StatementThreshold
    value: 100
  # 函数声明超过50个字符警告（不包括参数的长度）
  - key: readability-function-size.StatementThreshold
    value: 50
  # 函数参数超过5个的警报
  - key: readability-function-size.ParameterThreshold
    value: 5
  # 函数嵌套超过4个的警报
  - key: readability-function-size.NestingThreshold
    value: 4
