
# 文档：https://clang.llvm.org/docs/ClangFormatStyleOptions.html#penaltybreakcomment

# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto, CSharp
# Language: CSharp
# 标准: c++03, c++11, c++14, c++17, c++20, Latest, Auto
Standard: c++20
# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never
# tab宽度
TabWidth: 4
# 缩进宽度
IndentWidth: 4
# 指定访问修饰符是否应该有自己的缩进级别
IndentAccessModifiers: false
# 缩进case标签
IndentCaseLabels: true
# 缩进 goto 标签
IndentGotoLabels: false
# 预处理器指令缩进样式
IndentPPDirectives: BeforeHash
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4
# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket:  Align
# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments:  true
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: true
# 连续声明时，对齐所有声明的宏
AlignConsecutiveMacros: AcrossEmptyLines
# 左对齐逃脱换行(使用反斜杠换行)的反斜杠
AlignEscapedNewlines: Left
# 水平对齐二元和三元表达式的操作数
AlignOperands: Align
# 对齐连续的尾随的注释
AlignTrailingComments:  true
# 允许所有构造函数初始化列表放在下一行
AllowAllConstructorInitializersOnNextLine: false
# 允许所有参数放在下一行
AllowAllArgumentsOnNextLine: false
# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false
# 允许短的块放在同一行
AllowShortBlocksOnASingleLine:  false
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine:  false
# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: None
# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine:  false
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false
# 允许短的Lambdas在同一行
AllowShortLambdasOnASingleLine: None
# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None
# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None
# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings:  false
# 总是在template声明后换行
AlwaysBreakTemplateDeclarations:  true
# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: false
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters:  false
# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces:  Custom
# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
BraceWrapping:
  # class定义后面
  AfterClass: true
  # 控制语句后面
  AfterControlStatement:  true
  # case 标签后面
  AfterCaseLabel: true
  # Lambda {} 之前
  BeforeLambdaBody: false
  # enum定义后面
  AfterEnum:  true
  # 函数定义后面
  AfterFunction:  true
  # 命名空间定义后面
  AfterNamespace: true
  # while 之前
  BeforeWhile: false
  # 在数组后面
  # struct定义后面
  AfterStruct:  true
  # union定义后面
  AfterUnion: true
  #extern 导出块后面
  AfterExternBlock: true
  # catch之前
  BeforeCatch:  true
  # else之前
  BeforeElse: true
  # 缩进大括号
  IndentBraces: false
  # 空函数体
  SplitEmptyFunction: true
  # 空记录体(struct/class/union)的大括号是否可以在一行
  SplitEmptyRecord: true
  # 空命名空间
  SplitEmptyNamespace: true
# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: NonAssignment
# 在三元运算符前换行
BreakBeforeTernaryOperators:  true
# 构造函数初始化列表
BreakConstructorInitializers: BeforeComma
# 继承列表
BreakInheritanceList: BeforeComma
# 字符串字面量
BreakStringLiterals: false
# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializersBeforeComma:  false
# 每行字符的限制，0表示没有限制
ColumnLimit: 110
# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas: '^ IWYU pragma:'
# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# 构造函数的初始化列表的缩进宽度
# ConstructorInitializerIndentWidth: 2
# 延续的行的缩进宽度
# ContinuationIndentWidth:  4
# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false
# 关闭格式化
DisableFormat:  false
# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:  [ foreach, Q_FOREACH, BOOST_FOREACH ]
# 允许排序#include
SortIncludes: false
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# 开始一个块的宏的正则表达式
MacroBlockBegin:  ''
# 结束一个块的宏的正则表达式
MacroBlockEnd:  ''
# 连续空行的最大数量
MaxEmptyLinesToKeep:  1
# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Right
# 允许重新排版注释
ReflowComments: false
# 允许 using 声明排序
SortUsingDeclarations: true
# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# 在模板关键字前加括号
SpaceAfterTemplateKeyword: true
# 在 not（!）逻辑之后加括号
SpaceAfterLogicalNot: false
# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens:  ControlStatements
# 在c++11花括号列表前家空格
SpaceBeforeCpp11BracedList: true
# 在空块中添加空格 {}
SpaceInEmptyBlock: false
# 在方括号前加空格
SpaceBeforeSquareBrackets: false
# 在for循环每个条件前加空格
SpaceBeforeRangeBasedForLoopColon: true
# 在空的圆括号中添加空格
SpaceInEmptyParentheses:  false
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1
# 在尖括号的<后和>前添加空格
SpacesInAngles: false
# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals:  false
# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses:  false
# 在条件语句的括号中添加空格
SpacesInConditionalStatement: false
# 在圆括号的(后和)前添加空格
SpacesInParentheses: false
# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
#引用对齐方向，选项有：Left，Right，Middle
# ReferenceAlignment: Right
# 将限定符放在哪一边：Left, Right, Custom
QualifierAlignment: Custom
# 自定义限定符的排序（只有当 QualifierAlignment 设置为 Custom 才有效）
# 选项有：['const', 'inline', 'static', 'friend', 'constexpr', 'volatile', 'restrict', 'type']
QualifierOrder: ['inline', 'static', 'const', 'type']
# require 的位置：OwnLine，WithPreceding，WithFollowing，SingleLine
RequiresClausePosition: OwnLine
# require 表式式的缩进方式：OuterScope, Keyword
# RequiresExpressionIndentation: OuterScope
# 指定使用空行分隔定义块，包括类、结构、枚举和函数
SeparateDefinitionBlocks: Always
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: All
# 压缩命名空间
CompactNamespaces: false
# 计算命名空间行数，配合FixNamespaceComments使用
ShortNamespaceLines: 0
# 自动在命名空间末尾添加注释
FixNamespaceComments: true
# 是否自动添加 {}（if，else，while 等等）
InsertBraces: true

####################################################################################################################
# BasedOnStyle: LLVM
# UseTab: Never
# IndentWidth: 4
# TabWidth: 4
# BreakBeforeBraces: Allman
# AllowShortIfStatementsOnASingleLine: false
# IndentCaseLabels: false
# ColumnLimit: 0
# AccessModifierOffset: -4
# NamespaceIndentation: All
# FixNamespaceComments: false

# # 连续赋值时，对齐所有等号
# AlignConsecutiveAssignments: true

# # 连续声明时，对齐所有声明的变量名
# AlignConsecutiveDeclarations: true

# # 对齐连续位域字段的风格
AlignConsecutiveBitFields: AcrossEmptyLinesAndComments

# # 对齐连续宏定义的风格
# AlignConsecutiveMacros: AcrossEmptyLines #clang-format 12

# # 用于在使用反斜杠换行中对齐反斜杠的选项
# AlignEscapedNewlines: Left

# SortIncludes: false

# # 水平对齐二元和三元表达式的操作数
# AlignOperands: Align

# # 对齐连续的尾随的注释
# AlignTrailingComments: true
